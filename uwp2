// Models
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Shapes;
using Windows.UI.Xaml.Media;

public class SummaryContainer : INotifyPropertyChanged
{
    public DateTime StartDate => Dates?.Count > 0 ? Dates.OrderBy(d => d).First() : DateTime.MinValue;
    public DateTime EndDate => Dates?.Count > 0 ? Dates.OrderByDescending(d => d).First() : DateTime.MaxValue;

    public List<int> TimeTicks
    {
        get
        {
            var allTimes = Items
                .SelectMany(i => i.Timeframes.Values.SelectMany(t => t))
                .SelectMany(t => new[] { t.Item1, t.Item2 });

            if (!allTimes.Any()) return new List<int>();

            int min = allTimes.Min();
            int max = allTimes.Max();
            var ticks = new List<int>();
            for (int t = min; t <= max; t += 10)
            {
                ticks.Add(t);
            }
            return ticks;
        }
    }

    public string Label { get; set; } = "Categories";

    private List<DateTime> _dates = new List<DateTime>();
    public List<DateTime> Dates
    {
        get => _dates;
        set
        {
            _dates = value;
            OnPropertyChanged(nameof(Dates));
            OnPropertyChanged(nameof(StartDate));
            OnPropertyChanged(nameof(EndDate));
            OnPropertyChanged(nameof(TimeTicks));
        }
    }

    private ObservableCollection<SummaryContainerItem> _items = new();
    public ObservableCollection<SummaryContainerItem> Items
    {
        get => _items;
        set
        {
            _items = value;
            OnPropertyChanged(nameof(Items));
            OnPropertyChanged(nameof(TimeTicks));
        }
    }

    public Visibility TableVisibility { get; set; } = Visibility.Visible;

    public event PropertyChangedEventHandler PropertyChanged;
    protected void OnPropertyChanged(string propertyName) =>
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
}

public class SummaryContainerItem : INotifyPropertyChanged
{
    private string _category;
    public string Category
    {
        get => _category;
        set
        {
            _category = value;
            OnPropertyChanged(nameof(Category));
        }
    }

    private Dictionary<DateTime, List<Tuple<int, int>>> _timeframes = new();
    public Dictionary<DateTime, List<Tuple<int, int>>> Timeframes
    {
        get => _timeframes;
        set
        {
            _timeframes = value;
            OnPropertyChanged(nameof(Timeframes));
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;
    protected void OnPropertyChanged(string propertyName) =>
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
}

// Code-behind: SummaryTableControl.xaml.cs
public sealed partial class SummaryTableControl : UserControl
{
    public static double WidthFromTimeframe(Tuple<int, int> range)
    {
        if (range == null) return 0;
        int start = range.Item1;
        int end = range.Item2;
        double unitWidth = 0.1;
        return Math.Max((end - start) * unitWidth, 1);
    }

    public SummaryTableControl()
    {
        this.InitializeComponent();
    }

    public SummaryContainer Summary
    {
        get { return (SummaryContainer)GetValue(SummaryProperty); }
        set { SetValue(SummaryProperty, value); }
    }

    private static void OnSummaryChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
        var control = (SummaryTableControl)d;
        control.DataContext = e.NewValue;
    }

    public static readonly DependencyProperty SummaryProperty =
        DependencyProperty.Register("Summary", typeof(SummaryContainer), typeof(SummaryTableControl), new PropertyMetadata(null, OnSummaryChanged));

    private void Canvas_Loaded(object sender, RoutedEventArgs e)
    {
        var canvas = sender as Canvas;
        if (canvas == null) return;

        var date = (DateTime)canvas.DataContext;
        var item = (SummaryContainerItem)((FrameworkElement)canvas.Parent).DataContext;
        if (item == null || !item.Timeframes.ContainsKey(date)) return;

        canvas.Children.Clear();
        var timeframes = item.Timeframes[date];
        if (Summary == null || Summary.TimeTicks == null || !Summary.TimeTicks.Any()) return;
        int minTick = Summary.TimeTicks.Min();
        double unitWidth = 0.1;

        foreach (var timeframe in timeframes)
        {
            int start = timeframe.Item1;
            int end = timeframe.Item2;
            double left = (start - minTick) * unitWidth;
            double width = Math.Max((end - start) * unitWidth, 1);

            var rect = new Rectangle
            {
                Width = width,
                Height = 30,
                Fill = new SolidColorBrush(Windows.UI.Colors.Blue)
            };

            Canvas.SetLeft(rect, left);
            Canvas.SetTop(rect, 5);
            canvas.Children.Add(rect);
        }
    }
}

// Reminder: XAML structure remains unchanged but the canvas now dynamically draws all rectangles based on timeframes per date
<UserControl
    x:Class="YourNamespace.SummaryTableControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:YourNamespace"
    x:Name="Root">

    <ScrollViewer HorizontalScrollBarVisibility="Auto">
        <StackPanel>
            <!-- Header Row -->
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="150"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <!-- Category Label -->
                <TextBlock Grid.Row="0" Grid.Column="0"
                           Text="{x:Bind Summary.Label}" FontWeight="Bold" />

                <!-- Dates and Ticks -->
                <ItemsControl Grid.Row="0" Grid.Column="1"
                              ItemsSource="{x:Bind Summary.Dates, Mode=OneWay}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel Orientation="Horizontal"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate x:DataType="x:DateTime">
                            <StackPanel Width="300">
                                <TextBlock Text="{Binding}" FontWeight="Bold" HorizontalAlignment="Center"/>
                                <ItemsControl ItemsSource="{x:Bind Root.Summary.TimeTicks}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate x:DataType="x:Int32">
                                            <TextBlock Text="{Binding}" Margin="2,0"/>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </StackPanel>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </Grid>

            <!-- Category Rows -->
            <ItemsControl ItemsSource="{x:Bind Summary.Items, Mode=OneWay}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate x:DataType="local:SummaryContainerItem">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="150"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <!-- Category Label -->
                            <TextBlock Grid.Column="0" Text="{x:Bind Category}" VerticalAlignment="Center"/>

                            <!-- Timeframe Canvases for Each Date -->
                            <ItemsControl Grid.Column="1" ItemsSource="{x:Bind Root.Summary.Dates}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate x:DataType="x:DateTime">
                                        <Canvas Width="300" Height="40"
                                                Loaded="Canvas_Loaded"
                                                DataContext="{Binding}"/>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </Grid>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </StackPanel>
    </ScrollViewer>
</UserControl>

